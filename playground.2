#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.0 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 84 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 12 #"Courier New\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 12 #"Courier New\0"
0.0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 61 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
228 225 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 224
255 255 -1 -1           0 2283 0 28 3 12 #"#lang racket"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 142
(
 #";----------------------------------------Codigo utilizado para  apre"
 #"ndizado de racket e testes------------------------------------------"
 #"------"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 5 #";LEIA"
0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";Aqui serah o lugar onde poderemos brincar e aprender racket,serve  "
 #"qualquer coisa aqui"
) 0 0 24 29 1 #"\n"
0 0 17 3 83
(
 #";Faca anotacoes do que quis fazer para o outro entender e aprender c"
 #"om o que vc fez"
) 0 0 24 29 1 #"\n"
0 0 17 3 53 #";Oque deu  certo OU NAO , soh para entendermos melhor"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 1 #"4"
0 0 24 3 1 #" "
0 0 21 3 1 #"5"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 1 #"("
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 1 #" "
0 0 21 3 2 #"10"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 130
(
 #";testando car,qeu pega o cabecote e o resto (que como eh  visto como"
 #" um par) eh o RESTO DA LISTA (pq a lista inteira eh um objeto)"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"add-firsts"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lista1"
0 0 24 3 1 #" "
0 0 14 3 6 #"lista2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"lista1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 6 #"lista2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 50 #";esse aqui  ta  errado pq nao  da pra SOMAR listas"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"add-lasts"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"lista1"
0 0 24 3 1 #" "
0 0 14 3 6 #"lista2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"lista1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 6 #"lista2"
0 0 24 3 4 #"))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"tempL"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"())"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 135
(
 #";soma de duas listas (obs o tempL que ta ai nao tem haver com o defi"
 #"nido  ai em cima,ele soh eh uma forma de chamarmos uma lista  vazia"
) 0 0 24 29 1 #"\n"
0 0 17 3 87
(
 #";mas podiamos soh chamar '() que daria no mesmo teste (addL tempL a "
 #"b) & (addL '() a b)"
) 0 0 24 29 1 #"\n"
0 0 17 3 95
(
 #";Perceba o uso de cdr para pegar o resto da lista,enquanto a soma fo"
 #"i posta na tempL logo acima"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"addL"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tempL"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"tempL"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"newTemp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"tempL"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-firsts"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 4 #"addL"
0 0 24 3 1 #" "
0 0 14 3 7 #"newTemp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 86
(
 #";mesma cosia do de cima mas crieio que eh  recursivo la dentro o que"
 #" da mais liberdade"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"addL2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"recursivo"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tempL"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"tempL"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"newTemp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"tempL"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-firsts"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"recursivo"
0 0 24 3 1 #" "
0 0 14 3 7 #"newTemp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"recursivo"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"() "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"addL3"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"BANANA"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 49 #"\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH\""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"recursivo"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"tempL"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 2 #"or"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 5 #"null?"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 14 3 5 #"tempL"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"newTemp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"tempL"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 10 #"add-firsts"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 5 #")))])"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"              ("
0 0 14 3 9 #"recursivo"
0 0 24 3 1 #" "
0 0 14 3 7 #"newTemp"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 6 #"))))))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 9 #"recursivo"
0 0 24 3 1 #" "
0 0 14 3 6 #"BANANA"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 93
(
 #";as 10:37 descubro que tem algo que  faz um procedimento para cada m"
 #"embro de uma lista...cool"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 13 #"addL-elegante"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 5 #"list1"
0 0 24 3 1 #" "
0 0 14 3 5 #"list2"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"st-to-sy"
0 0 24 3 2 #"  "
0 0 17 3 22 #";String to symbol-List"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 6 #"string"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 2 #"(["
0 0 14 3 5 #"split"
0 0 24 3 2 #" ("
0 0 14 3 12 #"string-split"
0 0 24 3 1 #" "
0 0 14 3 6 #"string"
0 0 24 3 3 #")])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"atual"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 14 #"string->symbol"
0 0 24 3 1 #" "
0 0 14 3 5 #"atual"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"           "
0 0 14 3 5 #"split"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 28 #";SET! PARA ATUALIZAR VALORES"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 2 #"tm"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"bola"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 5 #"begin"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"bola"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 4 #"bola"
0 0 24 3 1 #" "
0 0 21 3 1 #"7"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 5 #"print"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 4 #"test"
0 0 24 3 1 #" "
0 0 14 3 4 #"bola"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"stringP"
0 0 24 3 1 #" "
0 0 19 3 23 #"\" ( a ; b ( c U d ) ) \""
0 0 24 3 2 #") "
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"listaP"
0 0 24 3 2 #" ("
0 0 14 3 8 #"st-to-sy"
0 0 24 3 1 #" "
0 0 14 3 7 #"stringP"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 126
(
 #";Um contador que quando ve um \"(\" adiciona quando ve um \")\" dimi"
 #"nui,quando chega em 0 ele faz a FUNCAO com o q tinha la dentro"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"parenteses"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-sym"
0 0 24 3 1 #" "
0 0 14 3 4 #"FUNC"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"writeln"
0 0 24 3 1 #" "
0 0 19 3 30 #"\"COMECO FUNCAO Parenteses em:\""
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"writeln"
0 0 24 3 1 #" "
0 0 14 3 8 #"list-sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 6 #"buffer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|(|"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 17 3 53 #";em ambos os casos (ser >0 ou nao) iremos incrementar"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|)|"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 7 #"writeln"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 17 3 104
(
 #";se 0 iremos fazer a  funcao, e nunca vai ser 0 sem ter tirodum ( an"
 #"tes, a nao  ser que apenas nao tenha"
) 0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"FUNC"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   )"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 8 #"list-sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"      )   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"sec-list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|(|"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 2 #"  "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|;|"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"b"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|)|"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|;|"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"c"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"second?"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"not-void?"
0 0 17 3 34 #";umaprocedure que faz  o oposto de"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 3 #"any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"void?"
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#f"
0 0 24 29 1 #"\n"
0 0 24 3 8 #"        "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"part1-e-p"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 6 #"buffer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 13 #"parentese-pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 2 #"])"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|(|"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 17 3 53 #";em ambos os casos (ser >0 ou nao) iremos incrementar"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                         ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 26 #"                        )]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|)|"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 17 3 104
(
 #";se 0 iremos fazer a  funcao, e nunca vai ser 0 sem ter tirodum ( an"
 #"tes, a nao  ser que apenas nao tenha"
) 0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 13 #"parentese-pos"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 28 #"                           ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 5 #"))))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   )"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 )"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 14 3 8 #"list-sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"      )   "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"extrair"
0 0 17 3 85
(
 #";extrair parenteses | Sim precisa das operacoes abaixo para ficar um"
 #"a lista bonitinha"
) 0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-sym"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"     ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"resp"
0 0 24 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 9 #"not-void?"
0 0 24 3 2 #" ("
0 0 14 3 9 #"part1-e-p"
0 0 24 3 1 #" "
0 0 14 3 8 #"list-sym"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 8 #"position"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"resp"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 24 3 1 #" "
0 0 14 3 4 #"resp"
0 0 24 3 2 #") "
0 0 14 3 8 #"position"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"temp-list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"member"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|)|"
0 0 24 3 1 #" "
0 0 14 3 8 #"sec-list"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"goo"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 1 #" "
0 0 14 3 8 #"sec-list"
0 0 24 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 24 3 2 #" ("
0 0 14 3 7 #"extrair"
0 0 24 3 1 #" "
0 0 14 3 8 #"sec-list"
0 0 24 3 2 #") "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"lili"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 39 #";testando usar  map como retorno logico"
0 0 24 29 1 #"\n"
0 0 17 3 109
(
 #";dessa forma conseguimos fazer o if  OR para todas as possibilidades"
 #" de caminho que um pode label pode seguir"
) 0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"or-map-test"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"holder"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 19 #"                  ("
0 0 14 3 2 #"if"
0 0 24 3 1 #"("
0 0 14 3 1 #"="
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 14 3 1 #"e"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 22 #"                     ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"holder"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 6 #"holder"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"gooio"
0 0 24 3 2 #" ("
0 0 14 3 11 #"or-map-test"
0 0 24 3 1 #" "
0 0 14 3 4 #"lili"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";Testando printar umalista com variaveis"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"prt"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"fprintf"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 19 3 20 #"\"Que  eh  isso : ~a\""
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 76
(
 #";Aqui embaixo vo testar se modificacoes sao carregadas ao longo de o"
 #"peracoes"
) 0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"struct"
0 0 24 3 1 #" "
0 0 14 3 5 #"grafo"
0 0 24 3 2 #" ("
0 0 14 3 13 #"lista-arestas"
0 0 24 3 1 #" "
0 0 14 3 8 #"no-atual"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 19 3 7 #"\"A B a\""
0 0 24 3 2 #"  "
0 0 19 3 7 #"\"B C b\""
0 0 24 3 1 #" "
0 0 19 3 7 #"\"C A c\""
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 1 #"A"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"build-grafo"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"entrada"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"arestas"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"atual"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 8 #"st-to-sy"
0 0 24 3 1 #" "
0 0 14 3 5 #"atual"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 5 #"first"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 20 #"arestas-com-booleana"
0 0 24 3 2 #" ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"atual"
0 0 24 3 2 #") "
0 0 17 3 84
(
 #"; essa parte deve ser tirada caso nao utilizemos booleanas para  are"
 #"stas percorridas"
) 0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 5 #"atual"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 41 #"                                        )"
0 0 24 29 1 #"\n"
0 0 24 3 38 #"                                      "
0 0 14 3 7 #"arestas"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 9 #"graf-resp"
0 0 24 3 2 #" ("
0 0 14 3 5 #"grafo"
0 0 24 3 1 #" "
0 0 14 3 20 #"arestas-com-booleana"
0 0 24 3 2 #" ("
0 0 14 3 6 #"second"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 3 #")))"
0 0 17 3 46 #";no caso de nao ter booleana coloque graf aqui"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 14 3 9 #"graf-resp"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"e-grafo"
0 0 24 3 2 #" ("
0 0 14 3 11 #"build-grafo"
0 0 24 3 1 #" "
0 0 14 3 7 #"entrada"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"mudar1"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"graf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 6 #"mudar2"
0 0 24 3 1 #" "
0 0 14 3 4 #"graf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"fprintf"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 28 #"\"Que  porra eh  essa : ~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 4 #"graf"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 6 #"mudar2"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 4 #"graf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 5 #"atual"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 11 #"vector-set!"
0 0 24 3 1 #" "
0 0 14 3 5 #"atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"2"
0 0 24 3 1 #" "
0 0 21 3 3 #"666"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 7 #"fprintf"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 15 #"\"Dentro : ~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 5 #"atual"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"         "
0 0 14 3 4 #"graf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 7 #"fprintf"
0 0 24 3 3 #"  ("
0 0 14 3 19 #"current-output-port"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 19 3 28 #"\"Que  porra eh  essa : ~a\\n\""
0 0 24 3 1 #" "
0 0 14 3 4 #"graf"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"vlist"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 1 #" "
0 0 21 3 2 #"22"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #") ("
0 0 14 3 6 #"vector"
0 0 24 3 1 #" "
0 0 21 3 1 #"3"
0 0 24 3 1 #" "
0 0 21 3 2 #"42"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"vazia"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 5 #"input"
0 0 24 3 2 #" ("
0 0 14 3 8 #"st-to-sy"
0 0 24 3 1 #" "
0 0 19 3 20 #"\"U c ; ( g ; f ) ) \""
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 16 #"encontra-PV-void"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sym-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 6 #"achado"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 6 #"buffer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"achado"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|(|"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 17 3 53 #";em ambos os casos (ser >0 ou nao) iremos incrementar"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|)|"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 17 3 106
(
 #";se 0 iremos fazer a  funcao, e nunca vai ser 0 sem ter tirado um ( "
 #"antes, a nao  ser que apenas nao tenha"
) 0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|;|"
0 0 24 3 4 #" ) ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"achado"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"buffer"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 24 29 1 #"\n"
0 0 24 3 16 #"                "
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 )"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 8 #"sym-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 11 #"encontra-PV"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sym-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"   ("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 7 #"retorno"
0 0 24 3 1 #"("
0 0 14 3 6 #"filter"
0 0 24 3 1 #" "
0 0 14 3 9 #"not-void?"
0 0 24 3 2 #" ("
0 0 14 3 16 #"encontra-PV-void"
0 0 24 3 1 #" "
0 0 14 3 8 #"sym-list"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 8 #"boolean?"
0 0 24 3 2 #" ("
0 0 14 3 4 #"last"
0 0 24 3 1 #" "
0 0 14 3 7 #"retorno"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 6 #"remove"
0 0 24 3 1 #" "
0 0 21 3 2 #"#t"
0 0 24 3 1 #" "
0 0 14 3 7 #"retorno"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"retorno"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 2 #" ("
0 0 14 3 6 #"length"
0 0 24 3 1 #" "
0 0 14 3 7 #"retorno"
0 0 24 3 2 #") "
0 0 21 3 1 #"2"
0 0 24 3 3 #" ))"
0 0 24 29 1 #"\n"
0 0 24 3 10 #"          "
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          )"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"retorno"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"    )))"
0 0 24 29 1 #"\n"
0 0 24 3 6 #"      "
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 40 #";(define listatest (list (list 1 2) #t))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 10 #"encontra-U"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 8 #"sym-list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 15 3 3 #"let"
0 0 24 3 3 #" (["
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"0"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 6 #"achado"
0 0 24 3 1 #" "
0 0 21 3 2 #"#f"
0 0 24 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 11 #"bufferzinho"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 3 #"()]"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ["
0 0 14 3 6 #"buffer"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 24 3 4 #"()])"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      ("
0 0 14 3 3 #"map"
0 0 24 3 2 #" ("
0 0 15 3 6 #"lambda"
0 0 24 3 2 #" ("
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             ("
0 0 14 3 2 #"if"
0 0 24 3 1 #" "
0 0 14 3 6 #"achado"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 14 3 4 #"void"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 ("
0 0 15 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|(|"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 17 3 53 #";em ambos os casos (ser >0 ou nao) iremos incrementar"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"bufferzinho"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 11 #"bufferzinho"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 27 #"                          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"+"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|)|"
0 0 24 3 2 #" )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #" ("
0 0 14 3 1 #"-"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 9 #"positive?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #") "
0 0 17 3 106
(
 #";se 0 iremos fazer a  funcao, e nunca vai ser 0 sem ter tirado um ( "
 #"antes, a nao  ser que apenas nao tenha"
) 0 0 24 29 1 #"\n"
0 0 24 3 25 #"                        ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"bufferzinho"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 11 #"bufferzinho"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                   [("
0 0 14 3 3 #"and"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"U"
0 0 24 3 4 #" ) ("
0 0 14 3 5 #"zero?"
0 0 24 3 1 #" "
0 0 14 3 7 #"counter"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 17 3 18 #";(set! achado #t )"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 6 #"buffer"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 11 #"bufferzinho"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 14 3 6 #"buffer"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                    "
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                    ]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   ["
0 0 14 3 4 #"else"
0 0 24 3 2 #" ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 11 #"bufferzinho"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 11 #"bufferzinho"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 14 3 7 #"s-atual"
0 0 24 3 4 #")))]"
0 0 24 29 1 #"\n"
0 0 24 3 20 #"                   )"
0 0 24 29 1 #"\n"
0 0 24 3 17 #"                 "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                 )"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"             )"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"           ("
0 0 14 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 14 3 8 #"sym-list"
0 0 24 3 1 #" "
0 0 21 3 1 #"1"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 7 #"      )"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 4 #"huhu"
0 0 24 3 2 #" ("
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"a"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 14 3 3 #"mer"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  ("
0 0 15 3 6 #"lambda"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 5 #"pair?"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"writeln"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|(|"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        ("
0 0 15 3 5 #"begin"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 4 #"set!"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #" ("
0 0 14 3 6 #"append"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 1 #" "
0 0 21 3 1 #"'"
0 0 14 3 1 #"o"
0 0 24 3 2 #"))"
0 0 24 29 1 #"\n"
0 0 24 3 11 #"          ("
0 0 14 3 7 #"writeln"
0 0 24 3 2 #" ("
0 0 14 3 8 #"symbol=?"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"list"
0 0 24 3 2 #") "
0 0 21 3 1 #"'"
0 0 14 3 3 #"|(|"
0 0 24 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 3 9 #"        )"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"    )"
0 0 24 29 1 #"\n"
0 0 24 3 3 #"  )"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 3 1 #"("
0 0 14 3 2 #"if"
0 0 24 3 2 #" ("
0 0 14 3 3 #"car"
0 0 24 3 1 #" "
0 0 14 3 4 #"huhu"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 2 #"#t"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 21 3 2 #"#f"
0 0 24 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0           0
